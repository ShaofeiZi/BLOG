(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{233:function(t,a,n){"use strict";n.r(a);var s=n(2),e=Object(s.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("div",{staticClass:"content"},[n("p",[t._v("本文章不会对RxJS的原理进行讲解，仅讨论如何在vue中对RxJS进行集成\n")]),n("p",[n("a",{attrs:{href:"https://shaofeizi.github.io/BLOG/tags/RXJS/",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于RXJS的几篇")])]),n("p",[n("a",{attrs:{href:"https://github.com/RxJS-CN/RxJS-Docs-CN",target:"_blank",rel:"noopener noreferrer"}},[t._v("RxJS 5 中文文档")])]),n("p",[n("a",{attrs:{href:"https://rxjs-cn.github.io/rxjs5-ultimate-cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("RxJS 5 ultimate 中文版")])]),n("h1",{attrs:{id:"vue简单集成rxjs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue简单集成rxjs","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue简单集成RxJS")]),n("p",[t._v("想要在Vue中使用RxJS，只需要如下引用即可，当然，更多引用方法可以参考官方文档，比如按需引入")]),n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Rx "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rxjs/Rx'")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果你想在vue中使用RxJS的体验更好，这里推荐使用vue-rx这个官方维护的库，使用如下：")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Vue "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" VueRx "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue-rx'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Rx "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'rxjs/Rx'")]),t._v("\n\nVue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VueRx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Rx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),n("p",[t._v("这样，在Vue实例当中就会多了subscriptions这个钩子函数，他的用法类似data，使用如下所示：")]),n("pre",{pre:!0,attrs:{class:"language-vue"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("姓名：{{ name$ }}"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("年龄：{{ age$ }}"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[n("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("v-stream:")]),t._v("click")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("setName$"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("点击设置name的值"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token script"}},[n("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    domStreams"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'setName$'")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscriptions")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            age$"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Rx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Observable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            name$"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setName$\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'myName'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("startWith")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n")])]),n("p",[t._v("如上所示，Rx.Observable.of(23)在被订阅时会被发出值23，this.setName$则是一个流事件，它在domStreams中定义，实际它是一个Subject（具体可查阅RxJS中对Subject的定义），在用户点击按钮的时候则会发出该点击源的数据，如上图的map operator中，会接收数据源发出的event对象（这里我们没有使用该对象，仅仅是返回一个我们定义的字符串'myName'），startWith则是初始化name$的值为空字符串，这里vue-rx已经帮我们做了一个隐式的subscribe绑定，所以值23会马上发出最后赋值到age$上，进而绑定到视图，在这里，我们可以把age$与name$看成是一个有数据源发出的可观察流的结果，这条流是响应的，初始发出的值会经过各种operator处理后响应到页面上。")]),n("h1",{attrs:{id:"集成vue-rx后使用rxjs"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集成vue-rx后使用rxjs","aria-hidden":"true"}},[t._v("#")]),t._v(" 集成vue-rx后使用RxJS")]),n("p",[n("a",{attrs:{href:"https://github.com/ShaofeiZi/vue-rxjs-demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("集成后demo")])]),n("p",[t._v("该项目采取了parcel构建、示例包括原生使用与集成vue-rx后使用的对比、事件如何使用、以及常用operator的示例（包含switchMap、concatMap、exhaustMap等的使用场景选择）")]),n("h2",{attrs:{id:"创建observeble"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建observeble","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建Observeble")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <h3>demo2 创建将数据转化成Observable方式</h3>\n    <p>字符串：{{ str$ }}</p>\n    <p>\n      数组: \n      <span v-for=\"(num, index) in arr$\" :key=\"index\">{{ num }}</span>\n    </p>\n    <p>对象：{{ obj$.a }}</p>\n    <p>布尔值：{{ bool$ }}</p>\n    <p>promise：{{ promise$ }}</p>\n    <p>interval: {{ interval$ }}</p>\n  </div>\n</template>\n\n<script>\nimport Rx from 'rxjs/Rx'\n\nexport default {\n  subscriptions () {\n    return {\n      /**\n       * 普通数据类型都可以用of进行转换\n       * promise对象可用from或者fromPromise\n       * interval可在给定时间区间内发出自增数字\n       */\n      str$: Rx.Observable.of('str'),\n      arr$: Rx.Observable.of([1, 2, 3]),\n      obj$: Rx.Observable.of({ \n        a: 'test-obj' \n      }),\n      bool$: Rx.Observable.of(true),\n      promise$: Rx.Observable.fromPromise(this.getPromise()),\n      interval$: Rx.Observable.interval(1000)\n    }\n  },\n  methods: {\n    getPromise () {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve('promise')\n        }, 1000)\n      })\n    }\n  }\n}\n<\/script>\n\n")])]),n("p",[t._v("创建数据流后，用法类似data，可将数据流的结果跟视图进行绑定")]),n("h2",{attrs:{id:"事件的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#事件的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件的使用")]),n("h3",{attrs:{id:"没有集成vue-rx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#没有集成vue-rx","aria-hidden":"true"}},[t._v("#")]),t._v(" 没有集成vue-rx")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("export default {\n  ...\n\n  // 需要获取dom，所以必须是mounted后执行才能成功\n  mounted () {\n    // fromEvent可以将dom绑定事件并转化成Observable可观察对象\n    Rx.Observable.fromEvent(this.$refs['btn'], 'click')\n      .subscribe(e => {\n        this.data = '成功获取data'\n      })\n  },\n\n  ... \n}\n\n\n")])]),n("h3",{attrs:{id:"集成vue-rx后"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#集成vue-rx后","aria-hidden":"true"}},[t._v("#")]),t._v(" 集成vue-rx后")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <button class=\"btn\" v-stream:click=\"getData$\">点击获取数据</button>\n</template>\n\n<script>\nexport default {\n  ...\n\n  // v-stream事件可以统一写在这里，具体可以看vue-rx的使用\n  domStreams: [\n    'getData$'\n  ],\n  subscriptions () {\n    return {\n      data$: this.getData$\n        // map操作符主要用于映射数据，这里我们直接返回了一个字符串\n        .map(e => {\n          return '成功获取data'\n        })\n    }\n  }\n}\n<\/script>\n\n")])]),n("h2",{attrs:{id:"switchmap、concatmap、exhaustmap使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#switchmap、concatmap、exhaustmap使用","aria-hidden":"true"}},[t._v("#")]),t._v(" switchMap、concatMap、exhaustMap使用")]),n("p",[t._v("一般这几个operator，会与http请求结合使用，下面我们看些简单用法，点击后将当前流映射成新的流")]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <div>\n    <h3>demo4 各种map方法运用</h3>\n    <button class="btn" v-stream:click="getConcatMapCount$">点击获取concatMapCount$</button>\n    <p>{{ concatMapCount$ }}</p>\n    <button class="btn" v-stream:click="getSwitchMapCount$">点击获取switchMapCount$</button>\n    <p>{{ switchMapCount$ }}</p>\n    <button class="btn" v-stream:click="getExhaustMapCount$">点击获取exhaustMapCount$</button>\n    <p>{{ exhaustMapCount$ }}</p>\n  </div>\n</template>\n\n<script>\nimport Rx from \'rxjs/Rx\'\n\nexport default {\n  data () {\n    return {\n      count: 0\n    }\n  },\n  domStreams: [\n    \'getConcatMapCount$\',\n    \'getSwitchMapCount$\',\n    \'getExhaustMapCount$\'\n  ],\n  subscriptions () {\n    /**\n     * 下面的operator会把一个Observable转化成另外一个Observable\n     * 通过返回一个观察流继续处理数据\n     */\n    return {\n      /**\n       * 当你连续点击按钮多次获取数据时，cancatMap会将获取到的数据按队列发出\n       */\n      concatMapCount$: this.getConcatMapCount$\n        .concatMap((e) => {\n          return Rx.Observable.from(this.getCount())\n        }),\n      /**\n       * 当你连续点击按钮多次获取数据时，switchMap只会将最后一个点击发出的值发出，前面发出的值会被吞掉\n       */\n      switchMapCount$: this.getSwitchMapCount$\n        .switchMap((e) => {\n          return Rx.Observable.from(this.getCount())\n        }),\n      /**\n       * 当你连续点击按钮多次时，exhaustMap仅执行一次，在第一次值发出后，才可以继续点击下一次发出值\n       */\n      exhaustMapCount$: this.getExhaustMapCount$\n        .exhaustMap(e => {\n          return Rx.Observable.from(this.getCount())\n        })\n    }\n  },\n  methods: {\n    getCount () {\n      return new Promise((resolve, reject) => {\n        this.count++\n        setTimeout(() => {\n          resolve(this.count)\n        }, 2000)\n      })\n    }\n  }\n}\n<\/script>\n\n')])]),n("p",[t._v("上面的getCount当成是2秒后响应的http请求，当你连续点击的时候，这几个map operator会有不一样的行为。")]),n("ul",[n("li",[t._v("concatMap在多次点击后会每隔两秒就发送一个递增的count")]),n("li",[t._v("switchMap在多次点击后，会只发出最后一次点击的count，比如我点了3次，switchMapCount$在2秒后会显示3，而不是1.")]),n("li",[t._v("exhaustMap则是第一次点击没有响应前不会执行后续的点击操作，直到响应后的点击才有效。")])]),n("h1",{attrs:{id:"关于rx5与rx6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关于rx5与rx6","aria-hidden":"true"}},[t._v("#")]),t._v(" 关于Rx5与Rx6")]),n("p",[t._v("上面的仓库是基于Rx5编写的示例，而新出的Rx6在api上有些变动，调用operator的方式不再是链式调用，而是通过传入pipe operator进行组合使用，还有Observable对象的引用也发生了改变，具体可以参考官方文档")]),n("p",[n("a",{attrs:{href:"http://rxjsdocs.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("RXJS6 官网")])])])}],!1,null,null,null);a.default=e.exports}}]);